name: builds

on:
  - push
  - pull_request
  - workflow_dispatch

permissions: read-all

env:
  DEFAULT_LIBHTP_REPO: https://github.com/OISF/libhtp
  DEFAULT_LIBHTP_BRANCH: 0.5.x
  DEFAULT_LIBHTP_PR:

  DEFAULT_SU_REPO: https://github.com/OISF/suricata-update
  DEFAULT_SU_BRANCH: master
  DEFAULT_SU_PR:

  DEFAULT_SV_REPO: https://github.com/OISF/suricata-verify
  DEFAULT_SV_BRANCH: master
  DEFAULT_SV_PR:

  DEFAULT_CFLAGS: "-Wall -Wextra -Werror -Wno-unused-parameter -Wno-unused-function"

  # Apt sometimes likes to ask for user input, this will prevent that.
  DEBIAN_FRONTEND: "noninteractive"

  # A recent version of stable Rust that is known to pass build, test and other
  # verification steps in this workflow. This was added because using "stable"
  # could cause some steps to fail.
  RUST_VERSION_KNOWN: "1.62.0"

  # The minimum version of Rust supported.
  RUST_VERSION_MIN: "1.58.1"

jobs:

  prepare-deps:
    name: Prepare dependencies
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt update && sudo apt -y install jq curl
      - name: Parse repo and branch information
        env:
          # We fetch the actual pull request to get the latest body as
          # github.event.pull_request.body has the body from the
          # initial pull request.
          PR_HREF: ${{ github.event.pull_request._links.self.href }}
        run: |
          if test "${PR_HREF}"; then
              body=$(curl -s "${PR_HREF}" | jq -r .body | tr -d '\r')

              libhtp_repo=$(echo "${body}" | awk '/^libhtp-repo/ { print $2 }')
              libhtp_branch=$(echo "${body}" | awk '/^libhtp-branch/ { print $2 }')
              libhtp_pr=$(echo "${body}" | awk '/^libhtp-pr/ { print $2 }')

              su_repo=$(echo "${body}" | awk '/^suricata-update-repo/ { print $2 }')
              su_branch=$(echo "${body}" | awk '/^suricata-update-branch/ { print $2 }')
              su_pr=$(echo "${body}" | awk '/^suricata-update-pr/ { print $2 }')

              sv_repo=$(echo "${body}" | awk '/^suricata-verify-repo/ { print $2 }')
              sv_branch=$(echo "${body}" | awk '/^suricata-verify-branch/ { print $2 }')
              sv_pr=$(echo "${body}" | awk '/^suricata-verify-pr/ { print $2 }')
          fi
          echo "libhtp_repo=${libhtp_repo:-${DEFAULT_LIBHTP_REPO}}" >> $GITHUB_ENV
          echo "libhtp_branch=${libhtp_branch:-${DEFAULT_LIBHTP_BRANCH}}" >> $GITHUB_ENV
          echo "libhtp_pr=${libhtp_pr:-${DEFAULT_LIBHTP_PR}}" >> $GITHUB_ENV

          echo "su_repo=${su_repo:-${DEFAULT_SU_REPO}}" >> $GITHUB_ENV
          echo "su_branch=${su_branch:-${DEFAULT_SU_BRANCH}}" >> $GITHUB_ENV
          echo "su_pr=${su_pr:-${DEFAULT_SU_PR}}" >> $GITHUB_ENV

          echo "sv_repo=${sv_repo:-${DEFAULT_SV_REPO}}" >> $GITHUB_ENV
          echo "sv_branch=${sv_branch:-${DEFAULT_SV_BRANCH}}" >> $GITHUB_ENV
          echo "sv_pr=${sv_pr:-${DEFAULT_SV_PR}}" >> $GITHUB_ENV
      - name: Fetching libhtp
        run: |
          git clone --depth 1 ${libhtp_repo} -b ${libhtp_branch} libhtp
          if [[ "${libhtp_pr}" != "" ]]; then
              cd libhtp
              git fetch origin pull/${libhtp_pr}/head:prep
              git checkout prep
              cd ..
          fi
          tar zcf libhtp.tar.gz libhtp
      - name: Fetching suricata-update
        run: |
          git clone --depth 1 ${su_repo} -b ${su_branch} suricata-update
          if [[ "${su_pr}" != "" ]]; then
              cd suricata-update
              git fetch origin pull/${su_pr}/head:prep
              git checkout prep
              cd ..
          fi
          tar zcf suricata-update.tar.gz suricata-update
      - name: Fetching suricata-verify
        run: |
          git clone ${sv_repo} -b ${sv_branch} suricata-verify
          if [[ "${sv_pr}" != "" ]]; then
              cd suricata-verify
              git fetch origin pull/${sv_pr}/head:prep
              git checkout prep
              git config --global user.email you@example.com
              git config --global user.name You
              git rebase ${DEFAULT_SV_BRANCH}
              cd ..
          fi
          tar zcf suricata-verify.tar.gz suricata-verify
      - name: Cleaning up
        run: rm -rf libhtp suricata-update suricata-verify
      - name: Uploading prep archive
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: prep
          path: .

  prepare-cbindgen:
    name: Prepare cbindgen
    runs-on: ubuntu-latest
    steps:
      - name: Cache ~/.cargo
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.cargo
          key: ${{ github.job }}-cargo
      - name: Installing Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustup target add x86_64-unknown-linux-musl
      - name: Buliding static cbindgen for Linux
        run: |
          cargo install --target x86_64-unknown-linux-musl --debug cbindgen
          cp $HOME/.cargo/bin/cbindgen .
      - name: Uploading prep archive
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: prep
          path: .

  windows-msys2-mingw64-npcap:
    name: Windows MSYS2 MINGW64 (NPcap)
    runs-on: windows-latest
    needs: [prepare-deps]
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Cache ~/.cargo
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.cargo
          key: ${{ github.job }}-cargo
      - uses: actions/checkout@v3.2.0
      - uses: msys2/setup-msys2@fa138fa56e2558760b9f2205135313c7345c5f3f
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain automake1.16 automake-wrapper autoconf libtool libyaml-devel pcre2-devel jansson-devel make mingw-w64-x86_64-libyaml mingw-w64-x86_64-pcre2 mingw-w64-x86_64-rust mingw-w64-x86_64-jansson unzip p7zip python-setuptools mingw-w64-x86_64-python-yaml mingw-w64-x86_64-jq mingw-w64-x86_64-libxml2
      # hack: install our own cbindgen system wide as we can't get the
      # preinstalled one to be picked up by configure
      - name: cbindgen
        run: cargo install --root /usr --force --debug --version 0.24.3 cbindgen
      - uses: actions/checkout@v3.2.0
      - uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7
        with:
          name: prep
          path: prep
      - run: tar xf prep/libhtp.tar.gz
      - run: tar xf prep/suricata-update.tar.gz
      - name: Npcap DLL
        run: |
          curl -sL -O https://nmap.org/npcap/dist/npcap-1.00.exe
          7z -y x -o/npcap-bin npcap-1.00.exe
          # hack: place dlls in cwd
          cp /npcap-bin/*.dll .
      - name: Npcap SDK
        run: |
          curl -sL -O https://nmap.org/npcap/dist/npcap-sdk-1.06.zip
          unzip npcap-sdk-1.06.zip -d /npcap
          cp /npcap/Lib/x64/* /usr/lib/
      - run: tar xf prep/suricata-verify.tar.gz
      - name: Build
        run: |
          ./autogen.sh
          ls /mingw64/lib
          env
#          CFLAGS="-ggdb -Werror" ./configure --enable-unittests --enable-gccprotect --disable-gccmarch-native --disable-shared --with-libpcap-includes=/npcap/Include --with-libpcap-libraries=/npcap/Lib/x64 --libdir=/mingw64/lib
#          make -j3
#       - name: Run
#         run: |
#           ./src/suricata --build-info
#           ./src/suricata -u -l /tmp/
#           # need cwd in path due to npcap dlls (see above)
#           PATH="$PATH:$(pwd)" python3 ./suricata-verify/run.py -q
#       - run: make install
#       - run: suricata-update -V
      - name: Uploading suricata archive
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: suricata
          path: ./src/suricata.exe

